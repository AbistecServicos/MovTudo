const { createClient } = require('@supabase/supabase-js')

require('dotenv').config({ path: '.env.local' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas!')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function reenviarConfirmacaoEmail() {
  console.log('üìß Reenviando confirma√ß√£o de email para usu√°rios de teste...')
  
  // Lista de emails dos usu√°rios de teste que precisam de confirma√ß√£o
  const emailsUsuarios = [
    'gerente1_movtudo_e1@abistec.com.br',
    'transportador1_movtudo@abistec.com.br',
    'cliente1_movtudo@abistec.com.br',
    'almirdss@gmail.com.br'
  ]

  for (const email of emailsUsuarios) {
    try {
      console.log(`\nüîÑ Processando: ${email}`)
      
      // Listar todos os usu√°rios e encontrar por email
      const { data: users, error: userError } = await supabase.auth.admin.listUsers()
      
      if (userError) {
        console.error(`‚ùå Erro ao listar usu√°rios:`, userError.message)
        continue
      }

      const existingUser = users.users.find(user => user.email === email)
      
      if (!existingUser) {
        console.log(`‚ö†Ô∏è  Usu√°rio n√£o encontrado: ${email}`)
        continue
      }

      // Verificar se j√° est√° confirmado
      if (existingUser.email_confirmed_at) {
        console.log(`‚úÖ Usu√°rio j√° confirmado: ${email}`)
        continue
      }

      // Reenviar email de confirma√ß√£o
      const { error: resendError } = await supabase.auth.resend({
        type: 'signup',
        email: email,
        options: {
          emailRedirectTo: 'http://localhost:3000/auth/callback'
        }
      })

      if (resendError) {
        console.error(`‚ùå Erro ao reenviar email para ${email}:`, resendError.message)
        
        // Se der erro, tentar confirmar manualmente
        console.log(`üîß Tentando confirmar manualmente...`)
        const { error: confirmError } = await supabase.auth.admin.updateUserById(
          existingUser.id,
          { email_confirm: true }
        )
        
        if (confirmError) {
          console.error(`‚ùå Erro ao confirmar manualmente:`, confirmError.message)
        } else {
          console.log(`‚úÖ Usu√°rio confirmado manualmente: ${email}`)
        }
      } else {
        console.log(`‚úÖ Email de confirma√ß√£o reenviado: ${email}`)
      }

    } catch (error) {
      console.error(`‚ùå Erro geral para ${email}:`, error.message)
    }
  }

  console.log('\nüéâ Processo conclu√≠do!')
  console.log('\nüìã PR√ìXIMOS PASSOS:')
  console.log('1. Verifique a caixa de entrada dos emails')
  console.log('2. Clique nos links de confirma√ß√£o')
  console.log('3. Se n√£o receber emails, os usu√°rios podem ter sido confirmados manualmente')
  console.log('\nüí° DICA: Para desenvolvimento, voc√™ pode desabilitar confirma√ß√£o de email no Supabase:')
  console.log('   Authentication ‚Üí Settings ‚Üí Enable email confirmations: OFF')
}

reenviarConfirmacaoEmail().catch(console.error)
